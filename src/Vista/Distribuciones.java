/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Vista;

import javax.swing.JOptionPane;
import org.apache.commons.math3.distribution.NormalDistribution;

/**
 *
 * @author SeeD
 */
public class Distribuciones extends javax.swing.JFrame {

    /**
     * Creates new form Menu
     */
    public Distribuciones() {
        initComponents();
        this.setLocationRelativeTo(null);
    }
    boolean verificacion2 = false;
    boolean verificacion1 = false;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        CampoTxt6 = new javax.swing.JTextField();
        Box3 = new javax.swing.JComboBox<>();
        CampoTxt7 = new javax.swing.JTextField();
        Box4 = new javax.swing.JComboBox<>();
        jLabel15 = new javax.swing.JLabel();
        CampoTxt9 = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        CampoTxt10 = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        Calcular2 = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        Check2 = new javax.swing.JCheckBox();
        jLabel34 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        CampoTxt1 = new javax.swing.JTextField();
        Box1 = new javax.swing.JComboBox<>();
        CampoTxt2 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        CampoTxt3 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        CampoTxt4 = new javax.swing.JTextField();
        Box2 = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        CampoTxt5 = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        Calcular1 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        Check1 = new javax.swing.JCheckBox();
        jLabel35 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel37 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jPanel4 = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        CampoTxt8 = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        CampoTxt11 = new javax.swing.JTextField();
        jLabel24 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        Box5 = new javax.swing.JComboBox<>();
        jLabel30 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        CampoTxt12 = new javax.swing.JTextField();
        CampoTxt13 = new javax.swing.JTextField();
        jLabel32 = new javax.swing.JLabel();
        Calcular3 = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JSeparator();
        jLabel33 = new javax.swing.JLabel();
        jLabel38 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Calculo de distribuciones");

        jTabbedPane1.setName(""); // NOI18N
        jTabbedPane1.setPreferredSize(new java.awt.Dimension(800, 409));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setForeground(new java.awt.Color(255, 255, 255));

        jLabel12.setFont(new java.awt.Font("Calibri", 3, 16)); // NOI18N
        jLabel12.setText("Distribución normal");

        jLabel13.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        jLabel13.setText("Media poblacional ( μ )");

        Box3.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        Box3.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Desviación Estandar", "Varianza" }));

        Box4.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        Box4.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "P ( x < # )", "P ( x > # )", "P ( #1 < #2 )" }));

        jLabel15.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        jLabel15.setText("Media muestral");

        jLabel16.setFont(new java.awt.Font("MS Reference Sans Serif", 0, 12)); // NOI18N
        jLabel16.setText(" 1 = ");

        CampoTxt10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CampoTxt10ActionPerformed(evt);
            }
        });

        jLabel17.setFont(new java.awt.Font("MS Reference Sans Serif", 0, 12)); // NOI18N
        jLabel17.setText(" 2 =");

        Calcular2.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        Calcular2.setText("Calcular probabilidad");
        Calcular2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Calcular2MouseClicked(evt);
            }
        });
        Calcular2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Calcular2ActionPerformed(evt);
            }
        });

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));
        jPanel5.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel18.setFont(new java.awt.Font("Calibri", 3, 18)); // NOI18N

        jLabel19.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N

        jLabel20.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N

        jLabel21.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N

        jLabel22.setFont(new java.awt.Font("Calibri", 1, 24)); // NOI18N

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel22, javax.swing.GroupLayout.DEFAULT_SIZE, 527, Short.MAX_VALUE)
                    .addComponent(jLabel21, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel20, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel19, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(109, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(103, Short.MAX_VALUE))
        );

        Check2.setBackground(new java.awt.Color(255, 255, 255));
        Check2.setText("Desconocida");
        Check2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Check2ActionPerformed(evt);
            }
        });

        jLabel34.setText("%=");
        jLabel34.setEnabled(false);

        jTextField1.setEnabled(false);

        jLabel36.setFont(new java.awt.Font("MS Reference Sans Serif", 0, 12)); // NOI18N
        jLabel36.setText("(  )");

        jSeparator1.setForeground(new java.awt.Color(0, 0, 204));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 296, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel13)
                                    .addComponent(Box3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(30, 30, 30)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(CampoTxt7, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(CampoTxt6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 98, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel16)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(CampoTxt9, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(10, 10, 10)
                                        .addComponent(jLabel17)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(CampoTxt10, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(Box4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel15)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel36)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(Check2))))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(jLabel34)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(Calcular2))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 661, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(202, 202, 202))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(CampoTxt6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Box4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Check2)
                    .addComponent(jLabel15)
                    .addComponent(jLabel36))
                .addGap(19, 19, 19)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Box3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CampoTxt7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16)
                    .addComponent(CampoTxt9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17)
                    .addComponent(CampoTxt10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel34)
                    .addComponent(Calcular2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Distribución normal", jPanel2);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        jPanel1.setPreferredSize(new java.awt.Dimension(770, 380));

        jLabel1.setFont(new java.awt.Font("Calibri", 3, 16)); // NOI18N
        jLabel1.setText("Media Muestral de la distribución muestral");

        jLabel2.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        jLabel2.setText("Media poblacional ( μ )");

        Box1.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        Box1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Desviación Estandar", "Varianza" }));

        jLabel3.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        jLabel3.setText("Muestra ( n )");

        jLabel4.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        jLabel4.setText("Media muestral");

        Box2.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        Box2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "P ( x < # )", "P ( x > # )", "P ( #1 < #2 )" }));

        jLabel5.setFont(new java.awt.Font("MS Reference Sans Serif", 0, 12)); // NOI18N
        jLabel5.setText(" 1 =");

        CampoTxt5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CampoTxt5ActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("MS Reference Sans Serif", 0, 12)); // NOI18N
        jLabel6.setText(" 2 =");

        Calcular1.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        Calcular1.setText("Calcular probabilidad");
        Calcular1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Calcular1MouseClicked(evt);
            }
        });

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel7.setFont(new java.awt.Font("Calibri", 3, 18)); // NOI18N

        jLabel8.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N

        jLabel9.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N

        jLabel10.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N

        jLabel11.setFont(new java.awt.Font("Calibri", 1, 24)); // NOI18N

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 576, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 576, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 576, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addGap(21, 21, 21)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 587, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(51, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(24, Short.MAX_VALUE))
        );

        Check1.setBackground(new java.awt.Color(255, 255, 255));
        Check1.setText("Desconocida");
        Check1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Check1ActionPerformed(evt);
            }
        });

        jLabel35.setText("%=");
        jLabel35.setEnabled(false);

        jTextField2.setEnabled(false);

        jLabel37.setFont(new java.awt.Font("MS Reference Sans Serif", 0, 12)); // NOI18N
        jLabel37.setText("(  )");

        jSeparator2.setForeground(new java.awt.Color(0, 51, 204));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(Box1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(26, 26, 26))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel37))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel5)
                                            .addComponent(jLabel35))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(CampoTxt4, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(Check1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(CampoTxt2, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(CampoTxt1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 98, Short.MAX_VALUE)
                                    .addComponent(CampoTxt5, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(CampoTxt3, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(Box2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(275, 275, 275))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(Calcular1)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 296, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSeparator2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(CampoTxt1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CampoTxt3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(21, 21, 21)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Box1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CampoTxt2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Box2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel37)
                    .addComponent(Check1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CampoTxt4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addComponent(CampoTxt5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel35))
                    .addComponent(Calcular1, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Media muestral", jPanel1);

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));

        jLabel14.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        jLabel14.setText("Muestra ( n )");

        jLabel23.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        jLabel23.setText("Proporción ( P )");

        jLabel24.setFont(new java.awt.Font("Calibri", 3, 16)); // NOI18N
        jLabel24.setText("Proporción Muestral de la prop. muestral");

        jPanel6.setBackground(new java.awt.Color(255, 255, 255));
        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel25.setFont(new java.awt.Font("Calibri", 3, 18)); // NOI18N

        jLabel26.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N

        jLabel27.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N

        jLabel28.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N

        jLabel29.setFont(new java.awt.Font("Calibri", 1, 24)); // NOI18N

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel29, javax.swing.GroupLayout.DEFAULT_SIZE, 554, Short.MAX_VALUE)
                    .addComponent(jLabel28, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel27, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel26, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(80, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel26, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel27, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel28, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel29, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(89, Short.MAX_VALUE))
        );

        Box5.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        Box5.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "P ( p < # )", "P ( p > # )", "P ( #1 < #2 )" }));

        jLabel30.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        jLabel30.setText("Media muestral (pGorro)");

        jLabel31.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        jLabel31.setText("P1 =");

        CampoTxt13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CampoTxt13ActionPerformed(evt);
            }
        });

        jLabel32.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        jLabel32.setText("P2 =");

        Calcular3.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        Calcular3.setText("Calcular probabilidad");
        Calcular3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Calcular3MouseClicked(evt);
            }
        });

        jSeparator3.setForeground(new java.awt.Color(0, 0, 204));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel24, javax.swing.GroupLayout.PREFERRED_SIZE, 296, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel23)
                                            .addComponent(jLabel14)
                                            .addComponent(jLabel30))
                                        .addGap(11, 11, 11))
                                    .addGroup(jPanel4Layout.createSequentialGroup()
                                        .addGap(2, 2, 2)
                                        .addComponent(jLabel31)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(CampoTxt12, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel32)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(CampoTxt13, javax.swing.GroupLayout.DEFAULT_SIZE, 98, Short.MAX_VALUE)
                                    .addComponent(CampoTxt11)
                                    .addComponent(CampoTxt8))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(Box5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Calcular3)))))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jSeparator3)))
                .addGap(131, 131, 131))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jLabel24)
                .addGap(10, 10, 10)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel23)
                            .addComponent(CampoTxt11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Box5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel14)
                            .addComponent(CampoTxt8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(13, 13, 13)
                        .addComponent(jLabel30)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(CampoTxt12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(CampoTxt13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel32)
                            .addComponent(Calcular3)))
                    .addComponent(jLabel31, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Proporción muestral", jPanel4);

        jLabel33.setFont(new java.awt.Font("Calibri", 1, 20)); // NOI18N
        jLabel33.setText("Probabilidad de Distribuciones");

        jLabel38.setFont(new java.awt.Font("Tahoma", 3, 12)); // NOI18N
        jLabel38.setText("Salir");
        jLabel38.setToolTipText("Salir");
        jLabel38.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel38.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel38MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel33)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel38, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(65, 65, 65))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 693, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel33)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel38)
                        .addGap(2, 2, 2)))
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 513, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void CampoTxt5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CampoTxt5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CampoTxt5ActionPerformed

    private void Calcular1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Calcular1MouseClicked
        // TODO add your handling code here:

        if (verificacion1 == false) {
            String miu = this.CampoTxt1.getText();
            String desviacionEstandar = null;
            String varianza = null;
            String muestra = this.CampoTxt3.getText();
            String xBarra1 = this.CampoTxt4.getText();
            String xBarra2 = this.CampoTxt5.getText();
            String caja1 = Box1.getSelectedItem().toString();
            String caja2 = Box2.getSelectedItem().toString();
            double z;
            boolean espacioOcupado = false;
            boolean usaDesviacionEstandar = false;
            NormalDistribution f = new NormalDistribution();

            if (caja1.equals("Desviación Estandar")) {
                desviacionEstandar = this.CampoTxt2.getText();
                if (desviacionEstandar.length() == 0) {
                    JOptionPane.showMessageDialog(this, "No has ingresado la desviación estandar \nVerifique e intente de nuevo", "Información", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    espacioOcupado = true;
                    usaDesviacionEstandar = true;
                }
            } else {
                varianza = this.CampoTxt2.getText();
                if (varianza.length() == 0) {
                    JOptionPane.showMessageDialog(this, "No has ingresado la Varianza \nVerifique e intente de nuevo", "Información", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    espacioOcupado = true;
                }
            }

            if (miu.length() != 0 && muestra.length() != 0 && xBarra1.length() != 0 && espacioOcupado == true) {
                if (caja2.equals("P ( x < # )")) {
                    try {
                        double miuDouble;
                        double xBarra1Double;
                        double desviacionEstDouble;
                        double muestraDouble;
                        double varianzaDouble;
                        double probabilidad;

                        if (usaDesviacionEstandar == true) {
                            miuDouble = Double.parseDouble(miu);
                            xBarra1Double = Double.parseDouble(xBarra1);
                            desviacionEstDouble = Double.parseDouble(desviacionEstandar);
                            muestraDouble = Double.parseDouble(muestra);

                            if (miuDouble < 0 || desviacionEstDouble < 0 || muestraDouble < 0 || xBarra1Double < 0) {
                                JOptionPane.showMessageDialog(this, "No puedes ingresar valores negativos", "Información", JOptionPane.INFORMATION_MESSAGE);

                            } else {
                                z = (xBarra1Double - miuDouble) / (desviacionEstDouble / Math.sqrt(muestraDouble));

                                probabilidad = f.cumulativeProbability(z);

                                jLabel7.setText("Resultado");
                                jLabel8.setText("Desviación de la media muestral: " + String.format("%.2f", desviacionEstDouble / Math.sqrt(muestraDouble)));
                                jLabel9.setText("X Se distribuye aprox. normal en ( " + String.format("%.2f", miuDouble) + " , " + String.format("%.2f", desviacionEstDouble / Math.sqrt(muestraDouble)) + " )");
                                jLabel10.setText("La prob. de que la media de la muestra sea menor a " + xBarra1Double + " es: ");
                                jLabel11.setText(String.format("%.3f", probabilidad * 100) + " %");

                            }

                        } else {
                            miuDouble = Double.parseDouble(miu);
                            xBarra1Double = Double.parseDouble(xBarra1);
                            varianzaDouble = Double.parseDouble(varianza);
                            muestraDouble = Double.parseDouble(muestra);

                            if (miuDouble < 0 || varianzaDouble < 0 || muestraDouble < 0 || xBarra1Double < 0) {
                                JOptionPane.showMessageDialog(this, "No puedes ingresar valores negativos", "Información", JOptionPane.INFORMATION_MESSAGE);

                            } else {

                                z = (xBarra1Double - miuDouble) / (Math.sqrt(varianzaDouble) / Math.sqrt(muestraDouble));

                                probabilidad = f.cumulativeProbability(z);

                                jLabel7.setText("Resultado");
                                jLabel8.setText("Desviación de la media muestral: " + String.format("%.2f", Math.sqrt(varianzaDouble) / Math.sqrt(muestraDouble)));
                                jLabel9.setText("X Se distribuye aprox. normal en ( " + String.format("%.2f", miuDouble) + " , " + String.format("%.2f", Math.sqrt(varianzaDouble) / Math.sqrt(muestraDouble)) + " )");
                                jLabel10.setText("La prob. de que la media de la muestra sea menor a " + xBarra1Double + " es: ");
                                jLabel11.setText(String.format("%.3f", probabilidad * 100) + " %");

                            }
                        }

                    } catch (NumberFormatException e) {
                        //Si ocurre un error durante el casteo el programa muestra un aviso correspondiente para que el usuario lo corrija
                        JOptionPane.showMessageDialog(this, "Los tipos de datos no coinciden\nVerifique e intente de nuevo", "Información", JOptionPane.INFORMATION_MESSAGE);
                    }
                }
                if (caja2.equals("P ( x > # )")) {
                    try {

                        double miuDouble;
                        double xBarra1Double;
                        double desviacionEstDouble;
                        double muestraDouble;
                        double varianzaDouble;
                        double probabilidad;

                        if (usaDesviacionEstandar == true) {
                            miuDouble = Double.parseDouble(miu);
                            xBarra1Double = Double.parseDouble(xBarra1);
                            desviacionEstDouble = Double.parseDouble(desviacionEstandar);
                            muestraDouble = Double.parseDouble(muestra);

                            if (miuDouble < 0 || desviacionEstDouble < 0 || muestraDouble < 0 || xBarra1Double < 0) {
                                JOptionPane.showMessageDialog(this, "No puedes ingresar valores negativos", "Información", JOptionPane.INFORMATION_MESSAGE);

                            } else {
                                z = (xBarra1Double - miuDouble) / (desviacionEstDouble / Math.sqrt(muestraDouble));

                                probabilidad = 1 - f.cumulativeProbability(z);

                                jLabel7.setText("Resultado");
                                jLabel8.setText("Desviación de la media muestral: " + String.format("%.2f", desviacionEstDouble / Math.sqrt(muestraDouble)));
                                jLabel9.setText("X Se distribuye aprox. normal en ( " + String.format("%.2f", miuDouble) + " , " + String.format("%.2f", desviacionEstDouble / Math.sqrt(muestraDouble)) + " )");
                                jLabel10.setText("La prob. de que la media de la muestra sea mayor a " + xBarra1Double + " es: ");
                                jLabel11.setText(String.format("%.3f", probabilidad * 100) + " %");

                            }

                        } else {
                            miuDouble = Double.parseDouble(miu);
                            xBarra1Double = Double.parseDouble(xBarra1);
                            varianzaDouble = Double.parseDouble(varianza);
                            muestraDouble = Double.parseDouble(muestra);

                            if (miuDouble < 0 || varianzaDouble < 0 || muestraDouble < 0 || xBarra1Double < 0) {
                                JOptionPane.showMessageDialog(this, "No puedes ingresar valores negativos", "Información", JOptionPane.INFORMATION_MESSAGE);

                            } else {

                                z = (xBarra1Double - miuDouble) / (Math.sqrt(varianzaDouble) / Math.sqrt(muestraDouble));

                                probabilidad = 1 - f.cumulativeProbability(z);

                                jLabel7.setText("Resultado");
                                jLabel8.setText("Desviación de la media muestral: " + String.format("%.2f", Math.sqrt(varianzaDouble) / Math.sqrt(muestraDouble)));
                                jLabel9.setText("X Se distribuye aprox. normal en ( " + String.format("%.2f", miuDouble) + " , " + String.format("%.2f", Math.sqrt(varianzaDouble) / Math.sqrt(muestraDouble)) + " )");
                                jLabel10.setText("La prob. de que la media de la muestra sea mayor a " + xBarra1Double + " es: ");
                                jLabel11.setText(String.format("%.3f", probabilidad * 100) + " %");

                            }
                        }

                    } catch (NumberFormatException e) {
                        //Si ocurre un error durante el casteo el programa muestra un aviso correspondiente para que el usuario lo corrija
                        JOptionPane.showMessageDialog(this, "Los tipos de datos no coinciden\nVerifique e intente de nuevo", "Información", JOptionPane.INFORMATION_MESSAGE);
                    }
                }

                if (caja2.equals("P ( #1 < #2 )")) {
                    if (xBarra2.length() == 0) {
                        JOptionPane.showMessageDialog(this, "No has ingresado xBarra #2\nVerifique e intente de nuevo", "Información", JOptionPane.INFORMATION_MESSAGE);

                    } else {
                        try {
                            double miuDouble;
                            double xBarra1Double;
                            double xBarra2Double;
                            double desviacionEstDouble;
                            double muestraDouble;
                            double varianzaDouble;
                            double probabilidad;
                            double z2;

                            if (usaDesviacionEstandar == true) {
                                miuDouble = Double.parseDouble(miu);
                                xBarra1Double = Double.parseDouble(xBarra1);
                                xBarra2Double = Double.parseDouble(xBarra2);
                                desviacionEstDouble = Double.parseDouble(desviacionEstandar);
                                muestraDouble = Double.parseDouble(muestra);

                                if (miuDouble < 0 || desviacionEstDouble < 0 || muestraDouble < 0 || xBarra1Double < 0 || xBarra2Double < 0) {
                                    JOptionPane.showMessageDialog(this, "No puedes ingresar valores negativos", "Información", JOptionPane.INFORMATION_MESSAGE);

                                } else {
                                    if (xBarra1Double > xBarra2Double) {
                                        double aux;
                                        aux = xBarra2Double;
                                        xBarra2Double = xBarra1Double;
                                        xBarra1Double = aux;
                                        JOptionPane.showMessageDialog(this, "Se han reordenado los valores de xBarra debido a que X1 era mayor que X2", "Información", JOptionPane.INFORMATION_MESSAGE);
                                    }
                                    z = (xBarra1Double - miuDouble) / (desviacionEstDouble / Math.sqrt(muestraDouble));
                                    z2 = (xBarra2Double - miuDouble) / (desviacionEstDouble / Math.sqrt(muestraDouble));

                                    probabilidad = f.cumulativeProbability(z, z2);

                                    jLabel7.setText("Resultado");
                                    jLabel8.setText("Desviación de la media muestral: " + String.format("%.2f", desviacionEstDouble / Math.sqrt(muestraDouble)));
                                    jLabel9.setText("X Se distribuye aprox. normal en ( " + String.format("%.2f", miuDouble) + " , " + String.format("%.2f", desviacionEstDouble / Math.sqrt(muestraDouble)) + " )");
                                    jLabel10.setText("La prob. de que la media de la muestra esté entre " + xBarra1Double + " y " + xBarra2Double + " es: ");
                                    jLabel11.setText(String.format("%.3f", probabilidad * 100) + " %");

                                }

                            } else {
                                miuDouble = Double.parseDouble(miu);
                                xBarra1Double = Double.parseDouble(xBarra1);
                                xBarra2Double = Double.parseDouble(xBarra2);
                                varianzaDouble = Double.parseDouble(varianza);
                                muestraDouble = Double.parseDouble(muestra);

                                if (miuDouble < 0 || varianzaDouble < 0 || muestraDouble < 0 || xBarra1Double < 0 || xBarra2Double < 0) {
                                    JOptionPane.showMessageDialog(this, "No puedes ingresar valores negativos", "Información", JOptionPane.INFORMATION_MESSAGE);

                                } else {
                                    if (xBarra1Double > xBarra2Double) {
                                        double aux;
                                        aux = xBarra2Double;
                                        xBarra2Double = xBarra1Double;
                                        xBarra1Double = aux;
                                        JOptionPane.showMessageDialog(this, "Se han reordenado los valores de xBarra debido a que X1 era mayor que X2", "Información", JOptionPane.INFORMATION_MESSAGE);
                                    }
                                    z = (xBarra1Double - miuDouble) / (Math.sqrt(varianzaDouble) / Math.sqrt(muestraDouble));
                                    z2 = (xBarra2Double - miuDouble) / (Math.sqrt(varianzaDouble) / Math.sqrt(muestraDouble));

                                    probabilidad = f.cumulativeProbability(z, z2);

                                    jLabel7.setText("Resultado");
                                    jLabel8.setText("Desviación de la media muestral: " + String.format("%.2f", Math.sqrt(varianzaDouble) / Math.sqrt(muestraDouble)));
                                    jLabel9.setText("X Se distribuye aprox. normal en ( " + String.format("%.2f", miuDouble) + " , " + String.format("%.2f", Math.sqrt(varianzaDouble) / Math.sqrt(muestraDouble)) + " )");
                                    jLabel10.setText("La prob. de que la media de la muestra esté entre " + xBarra1Double + " y " + xBarra2Double + " es: ");
                                    jLabel11.setText(String.format("%.3f", probabilidad * 100) + " %");

                                }

                            }

                        } catch (NumberFormatException e) {
                            //Si ocurre un error durante el casteo el programa muestra un aviso correspondiente para que el usuario lo corrija
                            JOptionPane.showMessageDialog(this, "Los tipos de datos no coinciden\nVerifique e intente de nuevo", "Información", JOptionPane.INFORMATION_MESSAGE);
                        }
                    }
                }

            } else {
                //Si hay espacios en blanco entonces se muestra un mensaje de informacion
                JOptionPane.showMessageDialog(this, "No debes dejar espacios en blanco", "Información", JOptionPane.INFORMATION_MESSAGE);
            }
        } else {

            String miu = this.CampoTxt1.getText();
            String desviacionEstandar = null;
            String varianza = null;
            String muestra = this.CampoTxt3.getText();
            String xBarra1 = this.CampoTxt4.getText();
            String xBarra2 = this.CampoTxt5.getText();
            String caja1 = Box1.getSelectedItem().toString();
            String caja2 = Box2.getSelectedItem().toString();
            String porcentaje = this.jTextField2.getText();
            double z;
            double x;
            boolean espacioOcupado = false;
            boolean usaDesviacionEstandar = false;
            NormalDistribution f = new NormalDistribution();

            if (caja1.equals("Desviación Estandar")) {
                desviacionEstandar = this.CampoTxt2.getText();
                if (desviacionEstandar.length() == 0) {
                    JOptionPane.showMessageDialog(this, "No has ingresado la desviación estandar \nVerifique e intente de nuevo", "Información", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    espacioOcupado = true;
                    usaDesviacionEstandar = true;
                }
            } else {
                varianza = this.CampoTxt2.getText();
                if (varianza.length() == 0) {
                    JOptionPane.showMessageDialog(this, "No has ingresado la Varianza \nVerifique e intente de nuevo", "Información", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    espacioOcupado = true;
                }
            }

            if (miu.length() != 0 && muestra.length() != 0 && porcentaje.length() != 0 && espacioOcupado == true) {
                if (caja2.equals("P ( x < # )")) {
                    try {
                        double miuDouble;
                        //double xBarra1Double;
                        double desviacionEstDouble;
                        double muestraDouble;
                        double varianzaDouble;
                        //double probabilidad;
                        double porcentajeDouble;

                        if (usaDesviacionEstandar == true) {
                            miuDouble = Double.parseDouble(miu);
                            //xBarra1Double = Double.parseDouble(xBarra1);
                            desviacionEstDouble = Double.parseDouble(desviacionEstandar);
                            muestraDouble = Double.parseDouble(muestra);
                            porcentajeDouble = Double.parseDouble(porcentaje);

                            if (miuDouble < 0 || desviacionEstDouble < 0 || muestraDouble < 0 || porcentajeDouble < 0) {
                                JOptionPane.showMessageDialog(this, "No puedes ingresar valores negativos", "Información", JOptionPane.INFORMATION_MESSAGE);

                            } else if (porcentajeDouble > 1) {
                                JOptionPane.showMessageDialog(this, "El valor del porcentaje tiene que ser menor a 1", "Información", JOptionPane.INFORMATION_MESSAGE);
                            } else {

                                x = f.inverseCumulativeProbability(porcentajeDouble) * (desviacionEstDouble / Math.sqrt(muestraDouble)) + miuDouble;

                                jLabel7.setText("Resultado");
                                jLabel8.setText("Desviación de la media muestral: " + String.format("%.2f", desviacionEstDouble));
                                jLabel9.setText("X Se distribuye aprox. normal en ( " + String.format("%.2f", miuDouble) + " , " + String.format("%.2f", desviacionEstDouble) + " )");
                                jLabel10.setText("Z es igual a: " + String.format("%.3f", f.inverseCumulativeProbability(porcentajeDouble)));
                                jLabel11.setText("X = "+String.format("%.3f", x));

                            }

                        } else {
                            miuDouble = Double.parseDouble(miu);
                            //xBarra1Double = Double.parseDouble(xBarra1);
                            varianzaDouble = Double.parseDouble(varianza);
                            muestraDouble = Double.parseDouble(muestra);
                            porcentajeDouble = Double.parseDouble(porcentaje);

                            if (miuDouble < 0 || varianzaDouble < 0 || muestraDouble < 0 || porcentajeDouble < 0) {
                                JOptionPane.showMessageDialog(this, "No puedes ingresar valores negativos", "Información", JOptionPane.INFORMATION_MESSAGE);

                            } else if (porcentajeDouble > 1) {
                                JOptionPane.showMessageDialog(this, "El valor del porcentaje tiene que ser menor a 1", "Información", JOptionPane.INFORMATION_MESSAGE);
                            } else {

                                x = f.inverseCumulativeProbability(porcentajeDouble) * (Math.sqrt(varianzaDouble) / Math.sqrt(muestraDouble)) + miuDouble;
                                //z = (xBarra1Double - miuDouble) / (Math.sqrt(varianzaDouble) / Math.sqrt(muestraDouble));

                                //probabilidad = f.cumulativeProbability(z);
                                jLabel7.setText("Resultado");
                                jLabel8.setText("Desviación de la media muestral: " + String.format("%.2f", Math.sqrt(varianzaDouble) / Math.sqrt(muestraDouble)));
                                jLabel9.setText("X Se distribuye aprox. normal en ( " + String.format("%.2f", miuDouble) + " , " + String.format("%.2f", Math.sqrt(varianzaDouble) / Math.sqrt(muestraDouble)) + " )");
                                jLabel10.setText("Z es igual a: " + String.format("%.3f", f.inverseCumulativeProbability(porcentajeDouble)));
                                jLabel11.setText("X = "+String.format("%.3f", x));

                            }
                        }

                    } catch (NumberFormatException e) {
                        //Si ocurre un error durante el casteo el programa muestra un aviso correspondiente para que el usuario lo corrija
                        JOptionPane.showMessageDialog(this, "Los tipos de datos no coinciden\nVerifique e intente de nuevo", "Información", JOptionPane.INFORMATION_MESSAGE);
                    }
                }
                if (caja2.equals("P ( x > # )")) {
                    try {

                        double miuDouble;
                        double xBarra1Double;
                        double desviacionEstDouble;
                        double muestraDouble;
                        double varianzaDouble;
                        double probabilidad;
                        double porcentajeDouble;

                        if (usaDesviacionEstandar == true) {
                            miuDouble = Double.parseDouble(miu);
                            //xBarra1Double = Double.parseDouble(xBarra1);
                            desviacionEstDouble = Double.parseDouble(desviacionEstandar);
                            muestraDouble = Double.parseDouble(muestra);
                            porcentajeDouble = Double.parseDouble(porcentaje);

                            if (miuDouble < 0 || desviacionEstDouble < 0 || muestraDouble < 0 || porcentajeDouble < 0) {
                                JOptionPane.showMessageDialog(this, "No puedes ingresar valores negativos", "Información", JOptionPane.INFORMATION_MESSAGE);

                            } else if (porcentajeDouble > 1) {
                                JOptionPane.showMessageDialog(this, "El valor del porcentaje tiene que ser menor a 1", "Información", JOptionPane.INFORMATION_MESSAGE);
                            } else {

                                porcentajeDouble = 1 - porcentajeDouble;

                                x = f.inverseCumulativeProbability(porcentajeDouble) * (desviacionEstDouble / Math.sqrt(muestraDouble)) + miuDouble;

                                jLabel7.setText("Resultado");
                                jLabel8.setText("Desviación de la media muestral: " + String.format("%.2f", desviacionEstDouble));
                                jLabel9.setText("X Se distribuye aprox. normal en ( " + String.format("%.2f", miuDouble) + " , " + String.format("%.2f", desviacionEstDouble) + " )");
                                jLabel10.setText("Z es igual a: " + String.format("%.3f", f.inverseCumulativeProbability(porcentajeDouble)));
                                jLabel11.setText("X = "+String.format("%.3f", x));

                            }

                        } else {
                            miuDouble = Double.parseDouble(miu);
                            xBarra1Double = Double.parseDouble(xBarra1);
                            varianzaDouble = Double.parseDouble(varianza);
                            muestraDouble = Double.parseDouble(muestra);
                            porcentajeDouble = Double.parseDouble(porcentaje);

                            if (miuDouble < 0 || varianzaDouble < 0 || muestraDouble < 0 || porcentajeDouble < 0) {
                                JOptionPane.showMessageDialog(this, "No puedes ingresar valores negativos", "Información", JOptionPane.INFORMATION_MESSAGE);

                            } else {
                                miuDouble = Double.parseDouble(miu);
                                //xBarra1Double = Double.parseDouble(xBarra1);
                                varianzaDouble = Double.parseDouble(varianza);
                                muestraDouble = Double.parseDouble(muestra);
                                porcentajeDouble = Double.parseDouble(porcentaje);

                                if (miuDouble < 0 || varianzaDouble < 0 || muestraDouble < 0 || porcentajeDouble < 0) {
                                    JOptionPane.showMessageDialog(this, "No puedes ingresar valores negativos", "Información", JOptionPane.INFORMATION_MESSAGE);

                                } else if (porcentajeDouble > 1) {
                                    JOptionPane.showMessageDialog(this, "El valor del porcentaje tiene que ser menor a 1", "Información", JOptionPane.INFORMATION_MESSAGE);
                                } else {

                                    porcentajeDouble = 1 - porcentajeDouble;

                                    x = f.inverseCumulativeProbability(porcentajeDouble) * (Math.sqrt(varianzaDouble) / Math.sqrt(muestraDouble)) + miuDouble;
                                    //z = (xBarra1Double - miuDouble) / (Math.sqrt(varianzaDouble) / Math.sqrt(muestraDouble));

                                    //probabilidad = f.cumulativeProbability(z);
                                    jLabel7.setText("Resultado");
                                    jLabel8.setText("Desviación de la media muestral: " + String.format("%.2f", Math.sqrt(varianzaDouble) / Math.sqrt(muestraDouble)));
                                    jLabel9.setText("X Se distribuye aprox. normal en ( " + String.format("%.2f", miuDouble) + " , " + String.format("%.2f", Math.sqrt(varianzaDouble) / Math.sqrt(muestraDouble)) + " )");
                                    jLabel10.setText("Z es igual a: " + String.format("%.3f", f.inverseCumulativeProbability(porcentajeDouble)));
                                    jLabel11.setText("X = "+String.format("%.3f", x));

                                }
                            }
                        }

                    } catch (NumberFormatException e) {
                        //Si ocurre un error durante el casteo el programa muestra un aviso correspondiente para que el usuario lo corrija
                        JOptionPane.showMessageDialog(this, "Los tipos de datos no coinciden\nVerifique e intente de nuevo", "Información", JOptionPane.INFORMATION_MESSAGE);
                    }
                }

                if (caja2.equals("P ( #1 < #2 )")) {

                    try {
                        JOptionPane.showMessageDialog(this, "La opción X desconocida no está disponible para P ( #1 < #2 )\nSelecciona otra opción", "Opción no disponible", JOptionPane.INFORMATION_MESSAGE);
                    } catch (NumberFormatException e) {
                        //Si ocurre un error durante el casteo el programa muestra un aviso correspondiente para que el usuario lo corrija
                        JOptionPane.showMessageDialog(this, "Los tipos de datos no coinciden\nVerifique e intente de nuevo", "Información", JOptionPane.INFORMATION_MESSAGE);
                    }

                }

            } else {
                //Si hay espacios en blanco entonces se muestra un mensaje de informacion
                JOptionPane.showMessageDialog(this, "No debes dejar espacios en blanco", "Información", JOptionPane.INFORMATION_MESSAGE);
            }
        }


    }//GEN-LAST:event_Calcular1MouseClicked

    private void CampoTxt10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CampoTxt10ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CampoTxt10ActionPerformed

    private void Calcular2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Calcular2MouseClicked
        // TODO add your handling code here:
        if (verificacion2 == false) {
            String miu = this.CampoTxt6.getText();
            String desviacionEstandar = null;
            String varianza = null;
            //String muestra = this.CampoTxt8.getText();
            String xBarra1 = this.CampoTxt9.getText();
            String xBarra2 = this.CampoTxt10.getText();
            String caja1 = Box3.getSelectedItem().toString();
            String caja2 = Box4.getSelectedItem().toString();
            double z;
            boolean espacioOcupado = false;
            boolean usaDesviacionEstandar = false;
            NormalDistribution f = new NormalDistribution();

            if (caja1.equals("Desviación Estandar")) {
                desviacionEstandar = this.CampoTxt7.getText();
                if (desviacionEstandar.length() == 0) {
                    JOptionPane.showMessageDialog(this, "No has ingresado la desviación estandar \nVerifique e intente de nuevo", "Información", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    espacioOcupado = true;
                    usaDesviacionEstandar = true;
                }
            } else {
                varianza = this.CampoTxt7.getText();
                if (varianza.length() == 0) {
                    JOptionPane.showMessageDialog(this, "No has ingresado la Varianza \nVerifique e intente de nuevo", "Información", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    espacioOcupado = true;
                }
            }

            if (miu.length() != 0 && xBarra1.length() != 0 && espacioOcupado == true) {
                if (caja2.equals("P ( x < # )")) {
                    try {
                        double miuDouble;
                        double xBarra1Double;
                        double desviacionEstDouble;
                        //double muestraDouble;
                        double varianzaDouble;
                        double probabilidad;

                        if (usaDesviacionEstandar == true) {
                            miuDouble = Double.parseDouble(miu);
                            xBarra1Double = Double.parseDouble(xBarra1);
                            desviacionEstDouble = Double.parseDouble(desviacionEstandar);
                            //muestraDouble = Double.parseDouble(muestra);

                            if (miuDouble < 0 || desviacionEstDouble < 0 || xBarra1Double < 0) {
                                JOptionPane.showMessageDialog(this, "No puedes ingresar valores negativos", "Información", JOptionPane.INFORMATION_MESSAGE);

                            } else {
                                z = (xBarra1Double - miuDouble) / (desviacionEstDouble);

                                probabilidad = f.cumulativeProbability(z);

                                jLabel18.setText("Resultado");
                                jLabel19.setText("Desviación de la media muestral: " + String.format("%.2f", desviacionEstDouble));
                                jLabel20.setText("X Se distribuye aprox. normal en ( " + String.format("%.2f", miuDouble) + " , " + String.format("%.2f", desviacionEstDouble) + " )");
                                jLabel21.setText("La prob. de que la media de la muestra sea menor a " + xBarra1Double + " es: ");
                                jLabel22.setText(String.format("%.3f", probabilidad * 100) + " %");

                            }

                        } else {
                            miuDouble = Double.parseDouble(miu);
                            xBarra1Double = Double.parseDouble(xBarra1);
                            varianzaDouble = Double.parseDouble(varianza);
                            //muestraDouble = Double.parseDouble(muestra);

                            if (miuDouble < 0 || varianzaDouble < 0 || xBarra1Double < 0) {
                                JOptionPane.showMessageDialog(this, "No puedes ingresar valores negativos", "Información", JOptionPane.INFORMATION_MESSAGE);

                            } else {

                                z = (xBarra1Double - miuDouble) / (Math.sqrt(varianzaDouble));

                                probabilidad = f.cumulativeProbability(z);

                                jLabel18.setText("Resultado");
                                jLabel19.setText("Desviación de la media muestral: " + String.format("%.2f", Math.sqrt(varianzaDouble)));
                                jLabel20.setText("X Se distribuye aprox. normal en ( " + String.format("%.2f", miuDouble) + " , " + String.format("%.2f", Math.sqrt(varianzaDouble)) + " )");
                                jLabel21.setText("La prob. de que la media de la muestra sea menor a " + xBarra1Double + " es: ");
                                jLabel22.setText(String.format("%.3f", probabilidad * 100) + " %");

                            }
                        }

                    } catch (NumberFormatException e) {
                        //Si ocurre un error durante el casteo el programa muestra un aviso correspondiente para que el usuario lo corrija
                        JOptionPane.showMessageDialog(this, "Los tipos de datos no coinciden\nVerifique e intente de nuevo", "Información", JOptionPane.INFORMATION_MESSAGE);
                    }
                }
                if (caja2.equals("P ( x > # )")) {
                    try {

                        double miuDouble;
                        double xBarra1Double;
                        double desviacionEstDouble;
                        double muestraDouble;
                        double varianzaDouble;
                        double probabilidad;

                        if (usaDesviacionEstandar == true) {
                            miuDouble = Double.parseDouble(miu);
                            xBarra1Double = Double.parseDouble(xBarra1);
                            desviacionEstDouble = Double.parseDouble(desviacionEstandar);
                            //muestraDouble = Double.parseDouble(muestra);

                            if (miuDouble < 0 || desviacionEstDouble < 0 || xBarra1Double < 0) {
                                JOptionPane.showMessageDialog(this, "No puedes ingresar valores negativos", "Información", JOptionPane.INFORMATION_MESSAGE);

                            } else {
                                z = (xBarra1Double - miuDouble) / (desviacionEstDouble);

                                probabilidad = 1 - f.cumulativeProbability(z);

                                jLabel18.setText("Resultado");
                                jLabel19.setText("Desviación de la media muestral: " + String.format("%.2f", desviacionEstDouble));
                                jLabel20.setText("X Se distribuye aprox. normal en ( " + String.format("%.2f", miuDouble) + " , " + String.format("%.2f", desviacionEstDouble) + " )");
                                jLabel21.setText("La prob. de que la media de la muestra sea mayor a " + xBarra1Double + " es: ");
                                jLabel22.setText(String.format("%.3f", probabilidad * 100) + " %");

                            }

                        } else {
                            miuDouble = Double.parseDouble(miu);
                            xBarra1Double = Double.parseDouble(xBarra1);
                            varianzaDouble = Double.parseDouble(varianza);
                            //muestraDouble = Double.parseDouble(muestra);

                            if (miuDouble < 0 || varianzaDouble < 0 || xBarra1Double < 0) {
                                JOptionPane.showMessageDialog(this, "No puedes ingresar valores negativos", "Información", JOptionPane.INFORMATION_MESSAGE);

                            } else {

                                z = (xBarra1Double - miuDouble) / (Math.sqrt(varianzaDouble));

                                probabilidad = 1 - f.cumulativeProbability(z);

                                jLabel18.setText("Resultado");
                                jLabel19.setText("Desviación de la media muestral: " + String.format("%.2f", Math.sqrt(varianzaDouble)));
                                jLabel20.setText("X Se distribuye aprox. normal en ( " + String.format("%.2f", miuDouble) + " , " + String.format("%.2f", Math.sqrt(varianzaDouble)) + " )");
                                jLabel21.setText("La prob. de que la media de la muestra sea mayor a " + xBarra1Double + " es: ");
                                jLabel22.setText(String.format("%.3f", probabilidad * 100) + " %");

                            }
                        }

                    } catch (NumberFormatException e) {
                        //Si ocurre un error durante el casteo el programa muestra un aviso correspondiente para que el usuario lo corrija
                        JOptionPane.showMessageDialog(this, "Los tipos de datos no coinciden\nVerifique e intente de nuevo", "Información", JOptionPane.INFORMATION_MESSAGE);
                    }
                }

                if (caja2.equals("P ( #1 < #2 )")) {
                    if (xBarra2.length() == 0) {
                        JOptionPane.showMessageDialog(this, "No has ingresado xBarra #2\nVerifique e intente de nuevo", "Información", JOptionPane.INFORMATION_MESSAGE);

                    } else {
                        try {
                            double miuDouble;
                            double xBarra1Double;
                            double xBarra2Double;
                            double desviacionEstDouble;
                            double muestraDouble;
                            double varianzaDouble;
                            double probabilidad;
                            double z2;

                            if (usaDesviacionEstandar == true) {
                                miuDouble = Double.parseDouble(miu);
                                xBarra1Double = Double.parseDouble(xBarra1);
                                xBarra2Double = Double.parseDouble(xBarra2);
                                desviacionEstDouble = Double.parseDouble(desviacionEstandar);
                                //muestraDouble = Double.parseDouble(muestra);

                                if (miuDouble < 0 || desviacionEstDouble < 0 || xBarra1Double < 0 || xBarra2Double < 0) {
                                    JOptionPane.showMessageDialog(this, "No puedes ingresar valores negativos", "Información", JOptionPane.INFORMATION_MESSAGE);

                                } else {
                                    if (xBarra1Double > xBarra2Double) {
                                        double aux;
                                        aux = xBarra2Double;
                                        xBarra2Double = xBarra1Double;
                                        xBarra1Double = aux;
                                        JOptionPane.showMessageDialog(this, "Se han reordenado los valores de xBarra debido a que X1 era mayor que X2", "Información", JOptionPane.INFORMATION_MESSAGE);
                                    }
                                    z = (xBarra1Double - miuDouble) / (desviacionEstDouble);
                                    z2 = (xBarra2Double - miuDouble) / (desviacionEstDouble);

                                    probabilidad = f.cumulativeProbability(z, z2);

                                    jLabel18.setText("Resultado");
                                    jLabel19.setText("Desviación de la media muestral: " + String.format("%.2f", desviacionEstDouble));
                                    jLabel20.setText("X Se distribuye aprox. normal en ( " + String.format("%.2f", miuDouble) + " , " + String.format("%.2f", desviacionEstDouble) + " )");
                                    jLabel21.setText("La prob. de que la media de la muestra esté entre " + xBarra1Double + " y " + xBarra2Double + " es: ");
                                    jLabel22.setText(String.format("%.3f", probabilidad * 100) + " %");

                                }

                            } else {
                                miuDouble = Double.parseDouble(miu);
                                xBarra1Double = Double.parseDouble(xBarra1);
                                xBarra2Double = Double.parseDouble(xBarra2);
                                varianzaDouble = Double.parseDouble(varianza);
                                //muestraDouble = Double.parseDouble(muestra);

                                if (miuDouble < 0 || varianzaDouble < 0 || xBarra1Double < 0 || xBarra2Double < 0) {
                                    JOptionPane.showMessageDialog(this, "No puedes ingresar valores negativos", "Información", JOptionPane.INFORMATION_MESSAGE);

                                } else {
                                    if (xBarra1Double > xBarra2Double) {
                                        double aux;
                                        aux = xBarra2Double;
                                        xBarra2Double = xBarra1Double;
                                        xBarra1Double = aux;
                                        JOptionPane.showMessageDialog(this, "Se han reordenado los valores de xBarra debido a que X1 era mayor que X2", "Información", JOptionPane.INFORMATION_MESSAGE);
                                    }
                                    z = (xBarra1Double - miuDouble) / (Math.sqrt(varianzaDouble));
                                    z2 = (xBarra2Double - miuDouble) / (Math.sqrt(varianzaDouble));

                                    probabilidad = f.cumulativeProbability(z, z2);

                                    jLabel18.setText("Resultado");
                                    jLabel19.setText("Desviación de la media muestral: " + String.format("%.2f", Math.sqrt(varianzaDouble)));
                                    jLabel20.setText("X Se distribuye aprox. normal en ( " + String.format("%.2f", miuDouble) + " , " + String.format("%.2f", Math.sqrt(varianzaDouble)) + " )");
                                    jLabel21.setText("La prob. de que la media de la muestra esté entre " + xBarra1Double + " y " + xBarra2Double + " es: ");
                                    jLabel22.setText(String.format("%.3f", probabilidad * 100) + " %");

                                }
                            }
                        } catch (NumberFormatException e) {
                            //Si ocurre un error durante el casteo el programa muestra un aviso correspondiente para que el usuario lo corrija
                            JOptionPane.showMessageDialog(this, "Los tipos de datos no coinciden\nVerifique e intente de nuevo", "Información", JOptionPane.INFORMATION_MESSAGE);
                        }
                    }
                }

            } else {
                //Si hay espacios en blanco entonces se muestra un mensaje de informacion
                JOptionPane.showMessageDialog(this, "No debes dejar espacios en blanco", "Información", JOptionPane.INFORMATION_MESSAGE);
            }
        } else {
            //JOptionPane.showMessageDialog(this, "La casilla esta activa", "Información", JOptionPane.INFORMATION_MESSAGE);

            String miu = this.CampoTxt6.getText();
            String desviacionEstandar = null;
            String varianza = null;
            //String muestra = this.CampoTxt8.getText();
            //String xBarra1 = this.CampoTxt9.getText();
            //String xBarra2 = this.CampoTxt10.getText();
            String caja1 = Box3.getSelectedItem().toString();
            String caja2 = Box4.getSelectedItem().toString();
            String porcentaje = this.jTextField1.getText();
            double z;
            double x;
            boolean espacioOcupado = false;
            boolean usaDesviacionEstandar = false;
            NormalDistribution f = new NormalDistribution();

            if (caja1.equals("Desviación Estandar")) {
                desviacionEstandar = this.CampoTxt7.getText();
                if (desviacionEstandar.length() == 0) {
                    JOptionPane.showMessageDialog(this, "No has ingresado la desviación estandar \nVerifique e intente de nuevo", "Información", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    espacioOcupado = true;
                    usaDesviacionEstandar = true;
                }
            } else {
                varianza = this.CampoTxt7.getText();
                if (varianza.length() == 0) {
                    JOptionPane.showMessageDialog(this, "No has ingresado la Varianza \nVerifique e intente de nuevo", "Información", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    espacioOcupado = true;
                }
            }

            if (miu.length() != 0 && porcentaje.length() != 0 && espacioOcupado == true) {
                if (caja2.equals("P ( x < # )")) {
                    try {
                        double miuDouble;
                        double xBarra1Double;
                        double desviacionEstDouble;
                        //double muestraDouble;
                        double varianzaDouble;
                        double probabilidad;
                        double porcentajeDouble;

                        if (usaDesviacionEstandar == true) {
                            miuDouble = Double.parseDouble(miu);
                            //xBarra1Double = Double.parseDouble(xBarra1);
                            desviacionEstDouble = Double.parseDouble(desviacionEstandar);
                            //muestraDouble = Double.parseDouble(muestra);
                            porcentajeDouble = Double.parseDouble(porcentaje);

                            if (miuDouble < 0 || desviacionEstDouble < 0 || porcentajeDouble < 0) {
                                JOptionPane.showMessageDialog(this, "No puedes ingresar valores negativos", "Información", JOptionPane.INFORMATION_MESSAGE);

                            } else if (porcentajeDouble > 1) {

                                JOptionPane.showMessageDialog(this, "El valor del porcentaje tiene que ser menor a 1", "Información", JOptionPane.INFORMATION_MESSAGE);

                            } else {
                                x = f.inverseCumulativeProbability(porcentajeDouble) * desviacionEstDouble + miuDouble;
                                //z = (xBarra1Double - miuDouble) / (desviacionEstDouble);

                                //probabilidad = f.cumulativeProbability(z);
                                jLabel18.setText("Resultado");
                                jLabel19.setText("Desviación de la media muestral: " + String.format("%.2f", desviacionEstDouble));
                                jLabel20.setText("X Se distribuye aprox. normal en ( " + String.format("%.2f", miuDouble) + " , " + String.format("%.2f", desviacionEstDouble) + " )");
                                jLabel21.setText("Z es igual a: " + String.format("%.3f", f.inverseCumulativeProbability(porcentajeDouble)));
                                jLabel22.setText("X = "+String.format("%.3f", x));

                            }

                        } else {
                            miuDouble = Double.parseDouble(miu);
                            //xBarra1Double = Double.parseDouble(xBarra1);
                            varianzaDouble = Double.parseDouble(varianza);
                            //muestraDouble = Double.parseDouble(muestra);
                            porcentajeDouble = Double.parseDouble(porcentaje);

                            if (miuDouble < 0 || varianzaDouble < 0 || porcentajeDouble < 0) {
                                JOptionPane.showMessageDialog(this, "No puedes ingresar valores negativos", "Información", JOptionPane.INFORMATION_MESSAGE);

                            } else {

                                x = f.inverseCumulativeProbability(porcentajeDouble) * (Math.sqrt(varianzaDouble)) + miuDouble;

                                //probabilidad = f.cumulativeProbability(z);
                                jLabel18.setText("Resultado");
                                jLabel19.setText("Desviación de la media muestral: " + String.format("%.2f", Math.sqrt(varianzaDouble)));
                                jLabel20.setText("X Se distribuye aprox. normal en ( " + String.format("%.2f", miuDouble) + " , " + String.format("%.2f", Math.sqrt(varianzaDouble)) + " )");
                                jLabel21.setText("Z es igual a: " + String.format("%.3f", f.inverseCumulativeProbability(porcentajeDouble)));
                                jLabel22.setText("X = "+String.format("%.3f", x));

                            }
                        }

                    } catch (NumberFormatException e) {
                        //Si ocurre un error durante el casteo el programa muestra un aviso correspondiente para que el usuario lo corrija
                        JOptionPane.showMessageDialog(this, "Los tipos de datos no coinciden\nVerifique e intente de nuevo", "Información", JOptionPane.INFORMATION_MESSAGE);
                    }
                }
                if (caja2.equals("P ( x > # )")) {
                    try {

                        double miuDouble;
                        double xBarra1Double;
                        double desviacionEstDouble;
                        //double muestraDouble;
                        double varianzaDouble;
                        double probabilidad;
                        double porcentajeDouble;

                        if (usaDesviacionEstandar == true) {
                            miuDouble = Double.parseDouble(miu);
                            //xBarra1Double = Double.parseDouble(xBarra1);
                            desviacionEstDouble = Double.parseDouble(desviacionEstandar);
                            //muestraDouble = Double.parseDouble(muestra);
                            porcentajeDouble = Double.parseDouble(porcentaje);

                            if (miuDouble < 0 || desviacionEstDouble < 0 || porcentajeDouble < 0) {
                                JOptionPane.showMessageDialog(this, "No puedes ingresar valores negativos", "Información", JOptionPane.INFORMATION_MESSAGE);

                            } else if (porcentajeDouble > 1) {

                                JOptionPane.showMessageDialog(this, "El valor del porcentaje tiene que ser menor a 1", "Información", JOptionPane.INFORMATION_MESSAGE);

                            } else {
                                porcentajeDouble = 1 - porcentajeDouble;

                                x = f.inverseCumulativeProbability(porcentajeDouble) * desviacionEstDouble + miuDouble;
                                //z = (xBarra1Double - miuDouble) / (desviacionEstDouble);

                                //probabilidad = f.cumulativeProbability(z);
                                jLabel18.setText("Resultado");
                                jLabel19.setText("Desviación de la media muestral: " + String.format("%.2f", desviacionEstDouble));
                                jLabel20.setText("X Se distribuye aprox. normal en ( " + String.format("%.2f", miuDouble) + " , " + String.format("%.2f", desviacionEstDouble) + " )");
                                jLabel21.setText("Z es igual a: " + String.format("%.3f", f.inverseCumulativeProbability(porcentajeDouble)));
                                jLabel22.setText("X = "+String.format("%.3f", x));

                            }

                        } else {
                            miuDouble = Double.parseDouble(miu);
                            //xBarra1Double = Double.parseDouble(xBarra1);
                            varianzaDouble = Double.parseDouble(varianza);
                            //muestraDouble = Double.parseDouble(muestra);
                            porcentajeDouble = Double.parseDouble(porcentaje);

                            if (miuDouble < 0 || varianzaDouble < 0 || porcentajeDouble < 0) {
                                JOptionPane.showMessageDialog(this, "No puedes ingresar valores negativos", "Información", JOptionPane.INFORMATION_MESSAGE);

                            } else {

                                porcentajeDouble = 1 - porcentajeDouble;

                                x = f.inverseCumulativeProbability(porcentajeDouble) * (Math.sqrt(varianzaDouble)) + miuDouble;

                                //probabilidad = f.cumulativeProbability(z);
                                jLabel18.setText("Resultado");
                                jLabel19.setText("Desviación de la media muestral: " + String.format("%.2f", Math.sqrt(varianzaDouble)));
                                jLabel20.setText("X Se distribuye aprox. normal en ( " + String.format("%.2f", miuDouble) + " , " + String.format("%.2f", Math.sqrt(varianzaDouble)) + " )");
                                jLabel21.setText("Z es igual a: " + String.format("%.3f", f.inverseCumulativeProbability(porcentajeDouble)));
                                jLabel22.setText("X = "+String.format("%.3f", x));

                            }
                        }
                    } catch (NumberFormatException e) {
                        //Si ocurre un error durante el casteo el programa muestra un aviso correspondiente para que el usuario lo corrija
                        JOptionPane.showMessageDialog(this, "Los tipos de datos no coinciden\nVerifique e intente de nuevo", "Información", JOptionPane.INFORMATION_MESSAGE);
                    }
                }

                if (caja2.equals("P ( #1 < #2 )")) {

                    try {
                        JOptionPane.showMessageDialog(this, "La opción X desconocida no está disponible para P ( #1 < #2 )\nSelecciona otra opción", "Opción no disponible", JOptionPane.INFORMATION_MESSAGE);

                    } catch (NumberFormatException e) {
                        //Si ocurre un error durante el casteo el programa muestra un aviso correspondiente para que el usuario lo corrija
                        JOptionPane.showMessageDialog(this, "Los tipos de datos no coinciden\nVerifique e intente de nuevo", "Información", JOptionPane.INFORMATION_MESSAGE);
                    }

                }

            } else {
                //Si hay espacios en blanco entonces se muestra un mensaje de informacion
                JOptionPane.showMessageDialog(this, "No debes dejar espacios en blanco", "Información", JOptionPane.INFORMATION_MESSAGE);
            }

        }
    }//GEN-LAST:event_Calcular2MouseClicked

    private void CampoTxt13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CampoTxt13ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CampoTxt13ActionPerformed

    private void Calcular3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Calcular3MouseClicked
        // TODO add your handling code here:

        String p = this.CampoTxt11.getText();
        String muestra = this.CampoTxt8.getText();
        String pGorro1 = this.CampoTxt12.getText();
        String pGorro2 = this.CampoTxt13.getText();
        String caja1 = Box5.getSelectedItem().toString();
        double z;
        NormalDistribution f = new NormalDistribution();

        if (p.length() != 0 && muestra.length() != 0 && pGorro1.length() != 0) {
            if (caja1.equals("P ( p < # )")) {
                try {
                    double pDouble = Double.parseDouble(p);
                    double muestraDouble = Double.parseDouble(muestra);
                    double pGorro1Double = Double.parseDouble(pGorro1);
                    double probabilidad;

                    if (pDouble < 0 || muestraDouble < 0 || pGorro1Double < 0) {
                        JOptionPane.showMessageDialog(this, "No puedes ingresar valores negativos", "Información", JOptionPane.INFORMATION_MESSAGE);
                    } else if (pDouble > 1 || pGorro1Double > 1) {
                        JOptionPane.showMessageDialog(this, "El valor de P y p Gorro deben ser menores a 1", "Información", JOptionPane.INFORMATION_MESSAGE);

                    } else {
                        z = (pGorro1Double - pDouble) / (Math.sqrt((pDouble * (1 - pDouble)) / (muestraDouble)));

                        probabilidad = f.cumulativeProbability(z);

                        jLabel25.setText("Resultado");
                        jLabel26.setText("Error estandar: " + String.format("%.2f", Math.sqrt((pDouble * (1 - pDouble)) / (muestraDouble))));
                        jLabel27.setText("p Se distribuye aprox. normal en ( " + String.format("%.2f", pDouble) + " , " + String.format("%.2f", Math.sqrt((pDouble * (1 - pDouble)) / (muestraDouble))) + " )");
                        jLabel28.setText("La prob. de que la media de la muestra sea menor a " + pGorro1Double + " es: ");
                        jLabel29.setText(String.format("%.3f", probabilidad * 100) + " %");
                    }

                } catch (NumberFormatException e) {
                    //Si ocurre un error durante el casteo el programa muestra un aviso correspondiente para que el usuario lo corrija
                    JOptionPane.showMessageDialog(this, "Los tipos de datos no coinciden\nVerifique e intente de nuevo", "Información", JOptionPane.INFORMATION_MESSAGE);
                }
            }
            if (caja1.equals("P ( p > # )")) {
                try {
                    double pDouble = Double.parseDouble(p);
                    double muestraDouble = Double.parseDouble(muestra);
                    double pGorro1Double = Double.parseDouble(pGorro1);
                    double probabilidad;

                    if (pDouble < 0 || muestraDouble < 0 || pGorro1Double < 0) {
                        JOptionPane.showMessageDialog(this, "No puedes ingresar valores negativos", "Información", JOptionPane.INFORMATION_MESSAGE);
                    } else if (pDouble > 1 || pGorro1Double > 1) {
                        JOptionPane.showMessageDialog(this, "El valor de P y p Gorro deben ser menores a 1", "Información", JOptionPane.INFORMATION_MESSAGE);

                    } else {
                        z = (pGorro1Double - pDouble) / (Math.sqrt((pDouble * (1 - pDouble)) / (muestraDouble)));

                        probabilidad = 1 - f.cumulativeProbability(z);

                        jLabel25.setText("Resultado");
                        jLabel26.setText("Error estandar: " + String.format("%.2f", Math.sqrt((pDouble * (1 - pDouble)) / (muestraDouble))));
                        jLabel27.setText("p Se distribuye aprox. normal en ( " + String.format("%.2f", pDouble) + " , " + String.format("%.2f", Math.sqrt((pDouble * (1 - pDouble)) / (muestraDouble))) + " )");
                        jLabel28.setText("La prob. de que la media de la muestra sea mayor a " + pGorro1Double + " es: ");
                        jLabel29.setText(String.format("%.3f", probabilidad * 100) + " %");
                    }

                } catch (NumberFormatException e) {
                    //Si ocurre un error durante el casteo el programa muestra un aviso correspondiente para que el usuario lo corrija
                    JOptionPane.showMessageDialog(this, "Los tipos de datos no coinciden\nVerifique e intente de nuevo", "Información", JOptionPane.INFORMATION_MESSAGE);
                }
            }

            if (caja1.equals("P ( #1 < #2 )")) {
                if (pGorro2.length() == 0) {
                    JOptionPane.showMessageDialog(this, "No has ingresado pGorro #2\nVerifique e intente de nuevo", "Información", JOptionPane.INFORMATION_MESSAGE);

                } else {
                    try {
                        double pDouble = Double.parseDouble(p);
                        double muestraDouble = Double.parseDouble(muestra);
                        double pGorro1Double = Double.parseDouble(pGorro1);
                        double pGorro2Double = Double.parseDouble(pGorro2);
                        double probabilidad;
                        double z2;

                        if (pDouble < 0 || muestraDouble < 0 || pGorro1Double < 0) {
                            JOptionPane.showMessageDialog(this, "No puedes ingresar valores negativos", "Información", JOptionPane.INFORMATION_MESSAGE);
                        } else if (pDouble > 1 || pGorro1Double > 1 || pGorro2Double > 1) {
                            JOptionPane.showMessageDialog(this, "Los valores de P y p Gorro deben ser menores a 1", "Información", JOptionPane.INFORMATION_MESSAGE);

                        } else {

                            if (pGorro1Double > pGorro2Double) {
                                double aux;
                                aux = pGorro2Double;
                                pGorro2Double = pGorro1Double;
                                pGorro1Double = aux;
                                JOptionPane.showMessageDialog(this, "Se han reordenado los valores de pGorro debido a que p1 era mayor que p2", "Información", JOptionPane.INFORMATION_MESSAGE);
                            }

                            z = (pGorro1Double - pDouble) / (Math.sqrt((pDouble * (1 - pDouble)) / (muestraDouble)));
                            z2 = (pGorro2Double - pDouble) / (Math.sqrt((pDouble * (1 - pDouble)) / (muestraDouble)));

                            probabilidad = f.cumulativeProbability(z, z2);

                            jLabel25.setText("Resultado");
                            jLabel26.setText("Error estandar: " + String.format("%.2f", Math.sqrt((pDouble * (1 - pDouble)) / (muestraDouble))));
                            jLabel27.setText("p Se distribuye aprox. normal en ( " + String.format("%.2f", pDouble) + " , " + String.format("%.2f", Math.sqrt((pDouble * (1 - pDouble)) / (muestraDouble))) + " )");
                            jLabel28.setText("La prob. de que la media de la muestra esté entre " + pGorro1Double + " y " + pGorro2Double + " es: ");
                            jLabel29.setText(String.format("%.3f", probabilidad * 100) + " %");
                        }

                    } catch (NumberFormatException e) {
                        //Si ocurre un error durante el casteo el programa muestra un aviso correspondiente para que el usuario lo corrija
                        JOptionPane.showMessageDialog(this, "Los tipos de datos no coinciden\nVerifique e intente de nuevo", "Información", JOptionPane.INFORMATION_MESSAGE);
                    }
                }

            }
        } else {
            //Si hay espacios en blanco entonces se muestra un mensaje de informacion
            JOptionPane.showMessageDialog(this, "No debes dejar espacios en blanco", "Información", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_Calcular3MouseClicked

    private void Check2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Check2ActionPerformed
        // TODO add your handling code here:
        if (Check2.isSelected()) {
            jLabel16.setEnabled(false);
            jLabel17.setEnabled(false);
            CampoTxt9.setEnabled(false);
            CampoTxt10.setEnabled(false);
            jLabel34.setEnabled(true);
            jTextField1.setEnabled(true);
            verificacion2 = true;
        } else if (Check2.isSelected() == false) {
            jLabel16.setEnabled(true);
            jLabel17.setEnabled(true);
            CampoTxt9.setEnabled(true);
            CampoTxt10.setEnabled(true);
            jLabel34.setEnabled(false);
            jTextField1.setEnabled(false);
            verificacion2 = false;
        }
    }//GEN-LAST:event_Check2ActionPerformed

    private void Check1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Check1ActionPerformed
        // TODO add your handling code here:
        if (Check1.isSelected()) {
            jLabel5.setEnabled(false);
            jLabel6.setEnabled(false);
            CampoTxt4.setEnabled(false);
            CampoTxt5.setEnabled(false);
            jLabel35.setEnabled(true);
            jTextField2.setEnabled(true);
            verificacion1 = true;
        } else if (Check1.isSelected() == false) {
            jLabel5.setEnabled(true);
            jLabel6.setEnabled(true);
            CampoTxt4.setEnabled(true);
            CampoTxt5.setEnabled(true);
            jLabel35.setEnabled(false);
            jTextField2.setEnabled(false);
            verificacion1 = false;
        }
    }//GEN-LAST:event_Check1ActionPerformed

    private void Calcular2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Calcular2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Calcular2ActionPerformed

    private void jLabel38MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel38MouseClicked
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_jLabel38MouseClicked

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(Distribuciones.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(Distribuciones.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(Distribuciones.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(Distribuciones.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new Distribuciones().setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> Box1;
    private javax.swing.JComboBox<String> Box2;
    private javax.swing.JComboBox<String> Box3;
    private javax.swing.JComboBox<String> Box4;
    private javax.swing.JComboBox<String> Box5;
    private javax.swing.JButton Calcular1;
    private javax.swing.JButton Calcular2;
    private javax.swing.JButton Calcular3;
    private javax.swing.JTextField CampoTxt1;
    private javax.swing.JTextField CampoTxt10;
    private javax.swing.JTextField CampoTxt11;
    private javax.swing.JTextField CampoTxt12;
    private javax.swing.JTextField CampoTxt13;
    private javax.swing.JTextField CampoTxt2;
    private javax.swing.JTextField CampoTxt3;
    private javax.swing.JTextField CampoTxt4;
    private javax.swing.JTextField CampoTxt5;
    private javax.swing.JTextField CampoTxt6;
    private javax.swing.JTextField CampoTxt7;
    private javax.swing.JTextField CampoTxt8;
    private javax.swing.JTextField CampoTxt9;
    private javax.swing.JCheckBox Check1;
    private javax.swing.JCheckBox Check2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables
}
